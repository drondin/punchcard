{"version":3,"sources":["artifacts/deployments lazy /^/.//.*/.json$/ groupOptions: {} namespace object","getEthereum.js","getWeb3.js","Row.js","Col.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","getEthereum","a","document","readyState","setTimeout","window","ethereum","getWeb3","web3","Web3","provider","providers","HttpProvider","Row","children","style","display","flexFlow","Col","size","flex","App","state","ipfsclient","accounts","chainid","punchcard","mintedFree","nOwnedPunchcards","ownedPunchcards","mintValue","contentValue","selectedPunchcard","ipfsBaseUri","fileContent","sendAddress","walletConnected","pendingTx","chainError","chainExplorer","mintPrice","tokenName","componentDidMount","console","log","initApp","enable","eth","getAccounts","parseInt","getChainId","on","location","reload","loadInitialContracts","setState","loadData","methods","callerHasClaimedFreeToken","call","from","balanceOf","initialPunchcard","found","i","tokenOfOwnerByIndex","nftID","getContent","nftContent","contentIsSet","nftContentSet","newPunchcard","content","isSet","fetch","res","text","result","push","chain","toString","loadContract","alert","baseURI","create","mintPriceWei","utils","fromWei","length","contractName","address","undefined","contractArtifact","Contract","abi","mintFree","claimFreeToken","send","transactionHash","newPendingTx","tx","msg","receipt","filter","itm","mintPunchcards","mintTokens","value","toWei","sendPunchcard","transferFrom","uploadTextIPFS","add","ipfsCID","setContent","path","this","transactionList","d","key","target","rel","href","punchcardList","onClick","margin","color","icon","empty","small","isAccountsUnlocked","className","marginLeft","marginRight","marginTop","width","dark","title","rounded","success","sprite","alignSelf","maxWidth","fromLeft","label","placeholder","type","onChange","textAlign","rows","disabled","warning","error","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.130dfa05.chunk.js","sourcesContent":["var map = {\n\t\"./1/0x632fE6804f3B057a150DC5Df78C62cC058b2f0F1.json\": [\n\t\t778,\n\t\t3\n\t],\n\t\"./1/0xEf0E84e8188545A48bFd7453d522AFeD3B454A09.json\": [\n\t\t779,\n\t\t4\n\t],\n\t\"./100/0x017a3719081316c4cF193A0A53Aa418188cD81EE.json\": [\n\t\t780,\n\t\t5\n\t],\n\t\"./100/0x632fE6804f3B057a150DC5Df78C62cC058b2f0F1.json\": [\n\t\t781,\n\t\t6\n\t],\n\t\"./137/0x017a3719081316c4cF193A0A53Aa418188cD81EE.json\": [\n\t\t782,\n\t\t7\n\t],\n\t\"./137/0x632fE6804f3B057a150DC5Df78C62cC058b2f0F1.json\": [\n\t\t783,\n\t\t8\n\t],\n\t\"./137/0xe2EbFDa0a92b41631438A98Ad0186E2c9dCb5C0c.json\": [\n\t\t784,\n\t\t9\n\t],\n\t\"./4/0x05e43A5Bca616f8b0bBee8b9692323C5C21A4002.json\": [\n\t\t785,\n\t\t10\n\t],\n\t\"./4/0x7Cbe8B446cfB38C60BD6665fA9483ef5c75f6682.json\": [\n\t\t786,\n\t\t11\n\t],\n\t\"./4/0xA16032f16d86160A38FcBA3f5861b2324B31B232.json\": [\n\t\t787,\n\t\t12\n\t],\n\t\"./80001/0x3f55C33e88F43065AcF5381175B324D54392861A.json\": [\n\t\t788,\n\t\t13\n\t],\n\t\"./map.json\": [\n\t\t140\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 776;\nmodule.exports = webpackAsyncContext;","export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 100))\n    }\n\n    return window.ethereum\n\n}\n","import Web3 from \"web3\";\nimport {getEthereum} from \"./getEthereum\";\n\nexport const getWeb3 = async () => {\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    return web3\n}","import React from \"react\";\n\nexport default function Row({ children }) {\n  return (\n    <div style={{ display: \"flex\", flexFlow: \"row wrap\"}}>{children}</div>\n  );\n}","import React from \"react\";\n\nexport default function Col({ children, size = 1 }) {\n  return <div style={{ flex: size }}>{children}</div>;\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { getWeb3 } from \"./getWeb3\";\nimport map from \"./artifacts/deployments/map.json\";\nimport { getEthereum } from \"./getEthereum\";\nimport { create } from \"ipfs-http-client\";\nimport {\n  Container,\n  Button,\n  TextInput,\n  TextArea,\n  Balloon,\n  Icon,\n  Sprite,\n} from \"nes-react\";\n\nimport Row from \"./Row\";\nimport Col from \"./Col\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    ipfsclient: null,\n    accounts: null,\n    chainid: null,\n    punchcard: null,\n    mintedFree: true,\n    nOwnedPunchcards: 0,\n    ownedPunchcards: [],\n    mintValue: 5,\n    contentValue: \"\",\n    selectedPunchcard: null,\n    ipfsBaseUri: null,\n    fileContent: \"\",\n    sendAddress: null,\n    walletConnected: false,\n    pendingTx: [],\n    chainError: false,\n    chainExplorer: null,\n    mintPrice: null,\n    tokenName: null\n  };\n\n  componentDidMount = async () => {\n    if (typeof web3 === \"undefined\") {\n      console.log(\"not connected\");\n    } else {\n      this.initApp();\n    }\n  };\n\n  initApp = async () => {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n    let walletConnected = false;\n    // Try and enable accounts (connect metamask)\n    try {\n      const ethereum = await getEthereum();\n      ethereum.enable();\n      walletConnected = true;\n    } catch (e) {\n      console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`);\n      console.log(e);\n    }\n\n    // Use web3 to get the user's accounts\n    const accounts = await web3.eth.getAccounts();\n\n    // Get the current chain id\n    const chainid = parseInt(await web3.eth.getChainId());\n\n    let chainExplorer = null;\n    let tokenName = null;\n\n    if(chainid===1 || chainid===1337){\n      chainExplorer = \"https://etherscan.io\"\n      tokenName = \"Ether\"\n    }\n    else if(chainid===100){\n      chainExplorer = \"https://blockscout.com/xdai/mainnet\"\n      tokenName = \"DAI\"\n    }\n    else if(chainid===137){\n      chainExplorer = \"https://polygonscan.com\"\n      tokenName = \"Matic\"\n    }\n\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", function (accounts) {\n        window.location.reload();\n      });\n    }\n\n    this.setState(\n      {\n        web3,\n        accounts,\n        chainid,\n        walletConnected,\n        chainExplorer,\n        tokenName\n      },\n      await this.loadInitialContracts\n    );\n  };\n\n  loadData = async () => {\n    const { accounts, punchcard, selectedPunchcard, ipfsBaseUri } = this.state;\n\n    const mintedFree = await punchcard.methods\n      .callerHasClaimedFreeToken()\n      .call({ from: accounts[0] });\n    const nOwnedPunchcards = await punchcard.methods\n      .balanceOf(accounts[0])\n      .call({ from: accounts[0] });\n    const ownedPunchcards = [];\n\n    let initialPunchcard = selectedPunchcard;\n    let found = false;\n\n    for (let i = 0; i < nOwnedPunchcards; i++) {\n      const nftID = await punchcard.methods\n        .tokenOfOwnerByIndex(accounts[0], i)\n        .call({ from: accounts[0] });\n      const nftContent = await punchcard.methods\n        .getContent(nftID)\n        .call({ from: accounts[0] });\n      const nftContentSet = await punchcard.methods\n        .contentIsSet(nftID)\n        .call({ from: accounts[0] });\n\n      const newPunchcard = {\n        id: nftID,\n        content: nftContent,\n        isSet: nftContentSet,\n      };\n\n      if (initialPunchcard && initialPunchcard.id === newPunchcard.id) {\n        initialPunchcard = newPunchcard;\n\n        fetch(ipfsBaseUri + newPunchcard.content)\n          .then((res) => res.text())\n          .then((result) => {\n            this.setState({\n              fileContent: result,\n            });\n          });\n\n        found = true;\n      }\n      ownedPunchcards.push(newPunchcard);\n    }\n\n    if (\n      (initialPunchcard === null || found === false) &&\n      nOwnedPunchcards > 0\n    ) {\n      initialPunchcard = ownedPunchcards[0];\n    } else if (nOwnedPunchcards === 0) {\n      initialPunchcard = null;\n    }\n\n    this.setState({\n      mintedFree,\n      nOwnedPunchcards,\n      ownedPunchcards,\n      selectedPunchcard: initialPunchcard,\n    });\n  };\n\n  loadInitialContracts = async () => {\n    const { chainid, web3 } = this.state;\n\n    let chain = chainid === 1337 ? \"dev\" : chainid.toString();\n\n    const punchcard = await this.loadContract(chain, \"Punchcard\");\n\n    if (chainid!==1 && chainid!==137 && chainid!==100 && chainid!==1337) {\n      this.setState({\n        chainError: true\n      });\n      return\n    }\n\n    if (!punchcard) {\n      alert(\"Make sure you are on the right network ETH, xDAI or Polygon\")\n    }\n\n    const ipfsBaseUri = await punchcard.methods.baseURI().call();\n    const ipfsclient = create(\"https://ipfs.infura.io:5001/api/v0\");\n\n    const mintPriceWei = await punchcard.methods.mintPrice().call();\n    const mintPrice = web3.utils.fromWei(mintPriceWei, 'ether');\n\n    this.setState({\n      punchcard,\n      ipfsclient,\n      ipfsBaseUri,\n      mintPrice\n    });\n\n    if (this.state.accounts.length > 0) {\n      this.loadData();\n    }\n  };\n\n  loadContract = async (chain, contractName) => {\n    // Load a deployed contract instance into a web3 contract object\n    const { web3 } = this.state;\n\n    // Get the address of the most recent deployment from the deployment map\n    let address;\n    try {\n      address = map[chain][contractName][0];\n    } catch (e) {\n      console.log(\n        `Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`\n      );\n      return undefined;\n    }\n\n    // Load the artifact with the specified address\n    let contractArtifact;\n    try {\n      contractArtifact = await import(\n        `./artifacts/deployments/${chain}/${address}.json`\n      );\n    } catch (e) {\n      console.log(\n        `Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`\n      );\n      return undefined;\n    }\n\n    return new web3.eth.Contract(contractArtifact.abi, address);\n  };\n\n  mintFree = async (e) => {\n    const { accounts, punchcard, pendingTx } = this.state;\n    await punchcard.methods\n      .claimFreeToken()\n      .send({ from: accounts[0] })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Minting free Punched Card\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n        this.loadData();\n      });\n  };\n\n  mintPunchcards = async (e) => {\n    const { accounts, punchcard, mintValue, pendingTx, web3, mintPrice } = this.state;\n\n    await punchcard.methods\n      .mintTokens(mintValue)\n      .send({\n        from: accounts[0],\n        value: mintValue * web3.utils.toWei(mintPrice.toString(), \"ether\"),\n      })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Minting Punched Cards\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        console.log(\"minted punchards\");\n\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n          mintValue: 5,\n        });\n        this.loadData();\n      });\n  };\n\n  sendPunchcard = async (e) => {\n    const { accounts, punchcard, selectedPunchcard, pendingTx, sendAddress } = this.state;\n\n    await punchcard.methods\n      .transferFrom(accounts[0], sendAddress, selectedPunchcard.id)\n      .send({ from: accounts[0] })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Sending Punched Card\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          sendAddress: \"\",\n          pendingTx: newPendingTx\n        });\n        this.loadData();\n      });\n  };\n\n  uploadTextIPFS = async (e) => {\n    const { ipfsclient, contentValue, accounts, punchcard, pendingTx, selectedPunchcard } =\n      this.state;\n    const ipfsCID = await ipfsclient.add(contentValue);\n\n    await punchcard.methods\n      .setContent(selectedPunchcard.id, ipfsCID.path)\n      .send({ from: accounts[0] })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Sending Punched Card\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          contentValue: \"\",\n          pendingTx: newPendingTx\n        });\n        this.loadData();\n      });\n  };\n\n  render() {\n    const {\n      accounts,\n      mintedFree,\n      nOwnedPunchcards,\n      ownedPunchcards,\n      mintValue,\n      contentValue,\n      selectedPunchcard,\n      ipfsBaseUri,\n      sendAddress,\n      walletConnected,\n      fileContent,\n      pendingTx,\n      chainError,\n      chainExplorer,\n      mintPrice,\n      tokenName\n    } = this.state;\n\n    const transactionList = pendingTx.map((d) => (\n      <li key={d.tx}>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={chainExplorer+ \"/tx/\" + d.tx}>{d.msg}</a>\n      </li>\n    ));\n\n    const punchcardList = ownedPunchcards.map((d) => (\n      <li\n        key={d.id}\n        onClick={(e) => {\n          this.setState({ selectedPunchcard: d });\n\n          if (d.content) {\n            fetch(ipfsBaseUri + d.content)\n              .then((res) => res.text())\n              .then((result) => {\n                this.setState({\n                  fileContent: result,\n                });\n              });\n          }\n        }}\n        style={{ margin: \"1rem\", color: d === selectedPunchcard && \"#007bff\" }}\n      >\n        Punched Card {d.id} - <Icon icon=\"star\" empty={d.isSet === false} small />\n      </li>\n    ));\n\n    const isAccountsUnlocked = accounts ? accounts.length > 0 : false;\n\n    return (\n      <div\n        className=\"App\"\n        style={{\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: 15,\n          width: 1024,\n        }}\n      >\n        <link\n          href=\"https://fonts.googleapis.com/css?family=Press+Start+2P\"\n          rel=\"stylesheet\"\n        />\n\n        <h2>Punchedcard.eth.link</h2>\n        <br></br>\n        <Container dark title=\"What is this?\">\n          You ever wanted to send a message to another wallet or save a document\n          forever? <br></br> <br></br> Mint NFTs wiht text saved on IPFS {\" \"}\n          <Icon icon=\"heart\" />\n          <br></br>\n          <br></br>\n          Made by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/drondin0x\">@drondin0x</a> on Ethereum, xDAI and Polygon.\n        </Container>\n        <br></br>\n        {!walletConnected || accounts.length === 0 || chainError ? (\n          <Container rounded>\n            <Button success onClick={(e) => this.initApp()}>\n              Connect with Metamask.\n            </Button>\n            <br></br>\n            <br></br>\n            Only available on Ethereum, Polygon or xDai.\n          </Container>\n        ) : (\n          <div>\n            <Container rounded>\n              <strong>\n                Connected with account{\" \"}\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={chainExplorer+\"/address/\" + accounts[0]}>\n                  {\" \"}\n                  {accounts[0]}{\" \"}\n                </a>\n              </strong>\n            </Container>\n            <br></br>\n            <Container rounded title=\"Mint Punched Card\">\n              <Row>\n                <Col>\n                  {!isAccountsUnlocked || mintedFree ? (\n                    <div style={{ display: \"flex\" }}>\n                      <Sprite\n                        sprite=\"bcrikko\"\n                        style={{ alignSelf: \"flex-end\" }}\n                      />\n                      <Balloon\n                        style={{ margin: \"2rem\", maxWidth: \"400px\" }}\n                        fromLeft\n                      >\n                        <TextInput\n                          label=\"How many Punched Cards do you want?\"\n                          placeholder=\"Text placeholder\"\n                          type=\"number\"\n                          value={mintValue}\n                          onChange={(e) =>\n                            this.setState({ mintValue: e.target.value })\n                          }\n                        />\n                        <br></br>\n                        <Button success onClick={(e) => this.mintPunchcards(e)}>\n                          Mint {mintValue} punched cards\n                        </Button>\n                      </Balloon>\n                    </div>\n                  ) : (\n                    <div style={{ display: \"flex\" }}>\n                      <Sprite\n                        sprite=\"bcrikko\"\n                        style={{ alignSelf: \"flex-end\" }}\n                      />\n                      <Balloon\n                        style={{ margin: \"2rem\", maxWidth: \"400px\" }}\n                        fromLeft\n                      >\n                        <span>\n                          Welcome, the first punchard is on the house!\n                        </span>\n                        <br></br>\n                        <br></br>\n                        <Button success onClick={(e) => this.mintFree(e)}>\n                          Mint free punched card\n                        </Button>\n                      </Balloon>\n                    </div>\n                  )}\n                </Col>\n                <Col style={{ textAlign: \"left\" }}>\n                  <p>Rules</p>\n                  <div style={{ textAlign: \"left\" }}>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      You can mint as many Punched Cards as you want\n                    </span>\n                    <br></br>\n                    <br></br>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      Each Punched Card costs {mintPrice} {tokenName}\n                    </span>\n                    <br></br>\n                    <br></br>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      You can set the content of a Punched Card only 1 time\n                    </span>\n                    <br></br>\n                    <br></br>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      The content is public and accessible by anyone\n                    </span>\n                  </div>\n                </Col>\n              </Row>\n            </Container>\n            <br></br>\n\n            {nOwnedPunchcards > 0 || pendingTx.length > 0 ? (\n              <Row>\n                <Col>\n                  <Container rounded title=\"My Punched Cards\">\n                    {punchcardList}\n                  </Container>\n                  <br></br>\n                  {pendingTx.length > 0 ? (\n                    <Container rounded title=\"Transactions\">\n                      {transactionList}\n                    </Container>\n                  ) : null}\n                </Col>\n                <Col>\n                  <Container rounded title=\"Content\">\n                    {selectedPunchcard &&\n                      selectedPunchcard.isSet === false && (\n                        <TextArea\n                          value={contentValue}\n                          onChange={(e) =>\n                            this.setState({ contentValue: e.target.value })\n                          }\n                          rows=\"8\"\n                        />\n                      )}\n                    {selectedPunchcard && selectedPunchcard.isSet && (\n                      <div>\n                        <TextArea value={fileContent} disabled rows=\"8\" />\n                        <br></br>\n                        <br></br>\n                        <a\n                          href={ipfsBaseUri + selectedPunchcard.content}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          IPFS URL\n                        </a>\n                        <br></br>\n                        <br></br>\n                      </div>\n                    )}\n                    {selectedPunchcard && selectedPunchcard.isSet === false && (\n                      <div>\n                        <br></br>\n                        <Button\n                          warning\n                          onClick={(e) =>\n                            selectedPunchcard.isSet === false &&\n                            this.uploadTextIPFS(e)\n                          }\n                          disabled={\n                            selectedPunchcard && selectedPunchcard.isSet\n                          }\n                        >\n                          Set Content {selectedPunchcard.id}\n                        </Button>\n                        <br></br>\n                        <br></br>\n                      </div>\n                    )}\n                  </Container>\n                  <br></br>\n                  {selectedPunchcard && (\n                    <Container rounded title=\"Send Punched Card\">\n                      <TextArea\n                        label=\"Enther Address\"\n                        type=\"text\"\n                        value={sendAddress}\n                        onChange={(e) =>\n                          this.setState({ sendAddress: e.target.value })\n                        }\n                      />\n                      <Button\n                        error\n                        style={{ \"margin-top\": \"20px\" }}\n                        onClick={(e) => this.sendPunchcard(e)}\n                      >\n                        Send Punchcard {selectedPunchcard.id}\n                      </Button>\n                    </Container>\n                  )}\n                </Col>\n              </Row>\n            ) : (\n              <div></div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}