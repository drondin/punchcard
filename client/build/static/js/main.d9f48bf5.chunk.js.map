{"version":3,"sources":["artifacts/deployments lazy /^/.//.*/.json$/ groupOptions: {} namespace object","getEthereum.js","getWeb3.js","Row.js","Col.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","getEthereum","a","document","readyState","setTimeout","window","ethereum","getWeb3","web3","Web3","provider","providers","HttpProvider","Row","children","style","display","flexFlow","Col","size","flex","App","state","ipfsclient","accounts","chainid","punchcard","mintedFree","nOwnedPunchcards","ownedPunchcards","mintValue","contentValue","selectedPunchcard","ipfsBaseUri","fileContent","sendAddress","walletConnected","pendingTx","componentDidMount","console","log","initApp","enable","eth","getAccounts","parseInt","getChainId","on","location","reload","loadInitialContracts","setState","loadData","methods","callerHasClaimedFreeToken","call","from","balanceOf","initialPunchcard","found","i","tokenOfOwnerByIndex","nftID","getContent","nftContent","contentIsSet","nftContentSet","newPunchcard","content","isSet","fetch","res","text","result","push","loadContract","baseURI","create","length","chain","contractName","address","undefined","contractArtifact","Contract","abi","mintFree","claimFreeToken","send","transactionHash","newPendingTx","tx","msg","receipt","filter","itm","mintPunchcards","mintTokens","value","utils","toWei","sendPunchcard","transferFrom","uploadTextIPFS","add","ipfsCID","setContent","path","this","transactionList","d","key","target","rel","href","punchcardList","onClick","margin","color","icon","empty","small","isAccountsUnlocked","className","marginLeft","marginRight","marginTop","width","dark","title","rounded","sprite","alignSelf","maxWidth","fromLeft","label","placeholder","type","onChange","success","textAlign","rows","disabled","warning","error","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d9f48bf5.chunk.js","sourcesContent":["var map = {\n\t\"./1/0x632fE6804f3B057a150DC5Df78C62cC058b2f0F1.json\": [\n\t\t778,\n\t\t3\n\t],\n\t\"./80001/0x3f55C33e88F43065AcF5381175B324D54392861A.json\": [\n\t\t779,\n\t\t4\n\t],\n\t\"./map.json\": [\n\t\t140\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 776;\nmodule.exports = webpackAsyncContext;","export const getEthereum = async () => {\n\n    // event listener is not reliable\n    while (document.readyState !== \"complete\") {\n        await new Promise(resolve => setTimeout(resolve, 100))\n    }\n\n    return window.ethereum\n\n}\n","import Web3 from \"web3\";\nimport {getEthereum} from \"./getEthereum\";\n\nexport const getWeb3 = async () => {\n\n    const ethereum = await getEthereum()\n    let web3\n\n    if (ethereum) {\n        web3 = new Web3(ethereum)\n    } else if (window.web3) {\n        web3 = window.web3\n    } else {\n        const provider = new Web3.providers.HttpProvider(\n            \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider)\n    }\n\n    return web3\n}","import React from \"react\";\n\nexport default function Row({ children }) {\n  return (\n    <div style={{ display: \"flex\", flexFlow: \"row wrap\"}}>{children}</div>\n  );\n}","import React from \"react\";\n\nexport default function Col({ children, size = 1 }) {\n  return <div style={{ flex: size }}>{children}</div>;\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { getWeb3 } from \"./getWeb3\";\nimport map from \"./artifacts/deployments/map.json\";\nimport { getEthereum } from \"./getEthereum\";\nimport { create } from \"ipfs-http-client\";\nimport {\n  Container,\n  Button,\n  TextInput,\n  TextArea,\n  Balloon,\n  Icon,\n  Sprite,\n} from \"nes-react\";\n\nimport Row from \"./Row\";\nimport Col from \"./Col\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    ipfsclient: null,\n    accounts: null,\n    chainid: null,\n    punchcard: null,\n    mintedFree: true,\n    nOwnedPunchcards: 0,\n    ownedPunchcards: [],\n    mintValue: 5,\n    contentValue: \"\",\n    selectedPunchcard: null,\n    ipfsBaseUri: null,\n    fileContent: \"\",\n    sendAddress: null,\n    walletConnected: false,\n    pendingTx: []\n  };\n\n  componentDidMount = async () => {\n    if (typeof web3 === \"undefined\") {\n      console.log(\"not connected\");\n    } else {\n      this.initApp();\n    }\n  };\n\n  initApp = async () => {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n    let walletConnected = false;\n    // Try and enable accounts (connect metamask)\n    try {\n      const ethereum = await getEthereum();\n      ethereum.enable();\n      walletConnected = true;\n    } catch (e) {\n      console.log(`Could not enable accounts. Interaction with contracts not available.\n            Use a modern browser with a Web3 plugin to fix this issue.`);\n      console.log(e);\n    }\n\n    // Use web3 to get the user's accounts\n    const accounts = await web3.eth.getAccounts();\n\n    // Get the current chain id\n    const chainid = parseInt(await web3.eth.getChainId());\n\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", function (accounts) {\n        window.location.reload();\n      });\n    }\n\n    this.setState(\n      {\n        web3,\n        accounts,\n        chainid,\n        walletConnected,\n      },\n      await this.loadInitialContracts\n    );\n  };\n\n  loadData = async () => {\n    const { accounts, punchcard, selectedPunchcard, ipfsBaseUri } = this.state;\n\n    const mintedFree = await punchcard.methods\n      .callerHasClaimedFreeToken()\n      .call({ from: accounts[0] });\n    const nOwnedPunchcards = await punchcard.methods\n      .balanceOf(accounts[0])\n      .call({ from: accounts[0] });\n    const ownedPunchcards = [];\n\n    let initialPunchcard = selectedPunchcard;\n    let found = false;\n\n    for (let i = 0; i < nOwnedPunchcards; i++) {\n      const nftID = await punchcard.methods\n        .tokenOfOwnerByIndex(accounts[0], i)\n        .call({ from: accounts[0] });\n      const nftContent = await punchcard.methods\n        .getContent(nftID)\n        .call({ from: accounts[0] });\n      const nftContentSet = await punchcard.methods\n        .contentIsSet(nftID)\n        .call({ from: accounts[0] });\n\n      const newPunchcard = {\n        id: nftID,\n        content: nftContent,\n        isSet: nftContentSet,\n      };\n\n      if (initialPunchcard && initialPunchcard.id === newPunchcard.id) {\n        initialPunchcard = newPunchcard;\n\n        fetch(ipfsBaseUri + newPunchcard.content)\n          .then((res) => res.text())\n          .then((result) => {\n            this.setState({\n              fileContent: result,\n            });\n          });\n\n        found = true;\n      }\n      ownedPunchcards.push(newPunchcard);\n    }\n\n    if (\n      (initialPunchcard === null || found === false) &&\n      nOwnedPunchcards > 0\n    ) {\n      initialPunchcard = ownedPunchcards[0];\n    } else if (nOwnedPunchcards === 0) {\n      initialPunchcard = null;\n    }\n\n    this.setState({\n      mintedFree,\n      nOwnedPunchcards,\n      ownedPunchcards,\n      selectedPunchcard: initialPunchcard,\n    });\n  };\n\n  loadInitialContracts = async () => {\n    const punchcard = await this.loadContract(\"1\", \"Punchcard\");\n\n    //mumbai\n    //const punchcard = await this.loadContract(\"80001\", \"Punchcard\");\n    //const punchcard = await this.loadContract(\"dev\", \"Punchcard\");\n\n    if (!punchcard) {\n      return;\n    }\n\n    const ipfsBaseUri = await punchcard.methods.baseURI().call();\n    const ipfsclient = create(\"https://ipfs.infura.io:5001/api/v0\");\n\n    this.setState({\n      punchcard,\n      ipfsclient,\n      ipfsBaseUri\n    });\n\n    if (this.state.accounts.length > 0) {\n      this.loadData();\n    }\n  };\n\n  loadContract = async (chain, contractName) => {\n    // Load a deployed contract instance into a web3 contract object\n    const { web3 } = this.state;\n\n    // Get the address of the most recent deployment from the deployment map\n    let address;\n    try {\n      address = map[chain][contractName][0];\n    } catch (e) {\n      console.log(\n        `Couldn't find any deployed contract \"${contractName}\" on the chain \"${chain}\".`\n      );\n      return undefined;\n    }\n\n    // Load the artifact with the specified address\n    let contractArtifact;\n    try {\n      contractArtifact = await import(\n        `./artifacts/deployments/${chain}/${address}.json`\n      );\n    } catch (e) {\n      console.log(\n        `Failed to load contract artifact \"./artifacts/deployments/${chain}/${address}.json\"`\n      );\n      return undefined;\n    }\n\n    return new web3.eth.Contract(contractArtifact.abi, address);\n  };\n\n  mintFree = async (e) => {\n    const { accounts, punchcard, pendingTx } = this.state;\n    await punchcard.methods\n      .claimFreeToken()\n      .send({ from: accounts[0] })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Minting free Punched Card\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n        this.loadData();\n      });\n  };\n\n  mintPunchcards = async (e) => {\n    const { accounts, punchcard, mintValue, pendingTx, web3 } = this.state;\n\n    await punchcard.methods\n      .mintTokens(mintValue)\n      .send({\n        from: accounts[0],\n        value: mintValue * web3.utils.toWei(\"0.001\", \"ether\"),\n      })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Minting Punched Cards\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        console.log(\"minted punchards\");\n\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n          mintValue: 5,\n        });\n        this.loadData();\n      });\n  };\n\n  sendPunchcard = async (e) => {\n    const { accounts, punchcard, selectedPunchcard, pendingTx, sendAddress } = this.state;\n\n    await punchcard.methods\n      .transferFrom(accounts[0], sendAddress, selectedPunchcard.id)\n      .send({ from: accounts[0] })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Sending Punched Card\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          sendAddress: \"\",\n          pendingTx: newPendingTx\n        });\n        this.loadData();\n      });\n  };\n\n  uploadTextIPFS = async (e) => {\n    const { ipfsclient, contentValue, accounts, punchcard, pendingTx, selectedPunchcard } =\n      this.state;\n    const ipfsCID = await ipfsclient.add(contentValue);\n\n    await punchcard.methods\n      .setContent(selectedPunchcard.id, ipfsCID.path)\n      .send({ from: accounts[0] })\n      .on(\"transactionHash\", async (transactionHash) => {\n        let newPendingTx = pendingTx;\n\n        newPendingTx.push({\n          tx: transactionHash,\n          msg: \"Sending Punched Card\",\n        });\n\n        this.setState({\n          pendingTx: newPendingTx,\n        });\n      })\n      .on(\"receipt\", async (receipt) => {\n        let newPendingTx = pendingTx.filter(function (itm) {\n          return itm.tx !== receipt.transactionHash;\n        });\n\n        this.setState({\n          contentValue: \"\",\n          pendingTx: newPendingTx\n        });\n        this.loadData();\n      });\n  };\n\n  render() {\n    const {\n      accounts,\n      mintedFree,\n      nOwnedPunchcards,\n      ownedPunchcards,\n      mintValue,\n      contentValue,\n      selectedPunchcard,\n      ipfsBaseUri,\n      sendAddress,\n      walletConnected,\n      fileContent,\n      pendingTx\n    } = this.state;\n\n    const transactionList = pendingTx.map((d) => (\n      <li key={d.tx}>\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://etherscan.io/tx/\" + d.tx}>{d.msg}</a>\n      </li>\n    ));\n\n    const punchcardList = ownedPunchcards.map((d) => (\n      <li\n        key={d.id}\n        onClick={(e) => {\n          this.setState({ selectedPunchcard: d });\n\n          if (d.content) {\n            fetch(ipfsBaseUri + d.content)\n              .then((res) => res.text())\n              .then((result) => {\n                this.setState({\n                  fileContent: result,\n                });\n              });\n          }\n        }}\n        style={{ margin: \"1rem\", color: d === selectedPunchcard && \"#007bff\" }}\n      >\n        Punched Card {d.id} - <Icon icon=\"star\" empty={d.isSet === false} small />\n      </li>\n    ));\n\n    const isAccountsUnlocked = accounts ? accounts.length > 0 : false;\n\n    return (\n      <div\n        className=\"App\"\n        style={{\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: 15,\n          width: 1024,\n        }}\n      >\n        <link\n          href=\"https://fonts.googleapis.com/css?family=Press+Start+2P\"\n          rel=\"stylesheet\"\n        />\n\n        <h2>Punchedcard.eth.link</h2>\n        <br></br>\n        <Container dark title=\"What is this?\">\n          You ever wanted to send a message to another wallet or save a document\n          forever? <br></br> <br></br> Mint NFTs wiht text saved on IPFS {\" \"}\n          <Icon icon=\"heart\" />\n          <br></br>\n          <br></br>\n          Made by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/drondin0x\">@drondin0x</a>\n        </Container>\n        <br></br>\n        {!walletConnected || accounts.length === 0 ? (\n          <Container rounded>\n            <Button success onClick={(e) => this.initApp()}>\n              Connect with Metamask.\n            </Button>\n          </Container>\n        ) : (\n          <div>\n            <Container rounded>\n              <strong>\n                Connected with account{\" \"}\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://etherscan.io/address/\" + accounts[0]}>\n                  {\" \"}\n                  {accounts[0]}{\" \"}\n                </a>\n              </strong>\n            </Container>\n            <br></br>\n            <Container rounded title=\"Mint Punched Card\">\n              <Row>\n                <Col>\n                  {!isAccountsUnlocked || mintedFree ? (\n                    <div style={{ display: \"flex\" }}>\n                      <Sprite\n                        sprite=\"bcrikko\"\n                        style={{ alignSelf: \"flex-end\" }}\n                      />\n                      <Balloon\n                        style={{ margin: \"2rem\", maxWidth: \"400px\" }}\n                        fromLeft\n                      >\n                        <TextInput\n                          label=\"How many Punched Cards do you want?\"\n                          placeholder=\"Text placeholder\"\n                          type=\"number\"\n                          value={mintValue}\n                          onChange={(e) =>\n                            this.setState({ mintValue: e.target.value })\n                          }\n                        />\n                        <br></br>\n                        <Button success onClick={(e) => this.mintPunchcards(e)}>\n                          Mint {mintValue} punched cards\n                        </Button>\n                      </Balloon>\n                    </div>\n                  ) : (\n                    <div style={{ display: \"flex\" }}>\n                      <Sprite\n                        sprite=\"bcrikko\"\n                        style={{ alignSelf: \"flex-end\" }}\n                      />\n                      <Balloon\n                        style={{ margin: \"2rem\", maxWidth: \"400px\" }}\n                        fromLeft\n                      >\n                        <span>\n                          Welcome, the first punchard is on the house!\n                        </span>\n                        <br></br>\n                        <br></br>\n                        <Button success onClick={(e) => this.mintFree(e)}>\n                          Mint free punched card\n                        </Button>\n                      </Balloon>\n                    </div>\n                  )}\n                </Col>\n                <Col style={{ textAlign: \"left\" }}>\n                  <p>Rules</p>\n                  <div style={{ textAlign: \"left\" }}>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      You can mint as many Punched Cards as you want\n                    </span>\n                    <br></br>\n                    <br></br>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      Each Punched Card costs 0.001 Ether\n                    </span>\n                    <br></br>\n                    <br></br>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      You can set the content of a Punched Card only 1 time\n                    </span>\n                    <br></br>\n                    <br></br>\n                    <Icon icon=\"like\" small />\n                    <span style={{ marginLeft: \"5px\" }}>\n                      The content is public and accessible by anyone\n                    </span>\n                  </div>\n                </Col>\n              </Row>\n            </Container>\n            <br></br>\n\n            {nOwnedPunchcards > 0 || pendingTx.length > 0 ? (\n              <Row>\n                <Col>\n                  <Container rounded title=\"My Punched Cards\">\n                    {punchcardList}\n                  </Container>\n                  <br></br>\n                  {pendingTx.length > 0 ? (\n                    <Container rounded title=\"Transactions\">\n                      {transactionList}\n                    </Container>\n                  ) : null}\n                </Col>\n                <Col>\n                  <Container rounded title=\"Content\">\n                    {selectedPunchcard &&\n                      selectedPunchcard.isSet === false && (\n                        <TextArea\n                          value={contentValue}\n                          onChange={(e) =>\n                            this.setState({ contentValue: e.target.value })\n                          }\n                          rows=\"8\"\n                        />\n                      )}\n                    {selectedPunchcard && selectedPunchcard.isSet && (\n                      <div>\n                        <TextArea value={fileContent} disabled rows=\"8\" />\n                        <br></br>\n                        <br></br>\n                        <a\n                          href={ipfsBaseUri + selectedPunchcard.content}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          IPFS URL\n                        </a>\n                        <br></br>\n                        <br></br>\n                      </div>\n                    )}\n                    {selectedPunchcard && selectedPunchcard.isSet === false && (\n                      <div>\n                        <br></br>\n                        <Button\n                          warning\n                          onClick={(e) =>\n                            selectedPunchcard.isSet === false &&\n                            this.uploadTextIPFS(e)\n                          }\n                          disabled={\n                            selectedPunchcard && selectedPunchcard.isSet\n                          }\n                        >\n                          Set Content {selectedPunchcard.id}\n                        </Button>\n                        <br></br>\n                        <br></br>\n                      </div>\n                    )}\n                  </Container>\n                  <br></br>\n                  {selectedPunchcard && (\n                    <Container rounded title=\"Send Punched Card\">\n                      <TextArea\n                        label=\"Enther Address\"\n                        type=\"text\"\n                        value={sendAddress}\n                        onChange={(e) =>\n                          this.setState({ sendAddress: e.target.value })\n                        }\n                      />\n                      <Button\n                        error\n                        style={{ \"margin-top\": \"20px\" }}\n                        onClick={(e) => this.sendPunchcard(e)}\n                      >\n                        Send Punchcard {selectedPunchcard.id}\n                      </Button>\n                    </Container>\n                  )}\n                </Col>\n              </Row>\n            ) : (\n              <div></div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}